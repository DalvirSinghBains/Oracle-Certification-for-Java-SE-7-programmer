Packages in Java
=================
A package is a grouping of related types providing access protection and name space management.
Packaging is the approach to organize and maintain the common related classes, interfaces and enums under a single bundle(hence called package).
classes, interfaces and enums are located in a hierarchical directory structure which reduce the complexity of the code management.
Package design makes ease in code re-use in other similar programs and also does the main feature of OOP i.e. encapsulation.

The attributes of package are
1) Class coupling,, reduces the package dependencies.
2) System coupling, reduces the package dependencies.
3) Package size, lager packages support reusability and small support maintainability.
4) Naming, Use of reverse domain name and lowercase.

Creation of package helps to distinguish between two classes with same name.
For eg:
For a small application development, two classes are required. Programmer A codes a class "Plane.java" which actually draws the plane line. Similarly, Programmer B codes a class "Plane.java" which creates a flying object plane.
When both code are submitted, the application development might be in problem without package
Solution with package can be.

1) Package math/geometry which contains Plane class to draw line.
package math.geometry;

2) Package air/fly which contains Plane to create flying object plane.
package air.fly;

Finally to implement and keep the source file in a package
package declaration should be done at the very begining of the code.
For Example lets assume the above plane class with package.

package math.geometry;	//package statement
import java.awt.*;		//importing other package
public class Plane {
	.....
}

Note: Package name must equate with the directory structure of the source code.
For Eg: class Plane.java with package math.geometry must be contained in directory structure like 
../math/geometry/Plane.java


Importing packages
=====================
The import statement allows the programmers to use the already written classes into your code.
The java platform consists of various useful packages by functions such as java.lang package which is implicitly imported itself.
Other class for reading and writing(input and output) for data streams is java.io.*;

There are two types of importing the packages.
Importing the classes inside the packages explicitly is the better choice. It will be the specific method of which particular class is used in the code. For eg: import package com.islingtoncollege.Module;
Importing the classes implicitly, imports the whole package  For eg: import com.islingtoncollege.*;


Oracle includes 209 packages in Java SE 7 API.
Basic java APIs are as follows
1) Java Utilities API
======================
It is contained in a java.util package. The categories of class in this package are Java Collection Framework, date and time facilities, internationalization.
Classes of the Java Collection Framework are as follows
    i) List - ArrayList, LinkedList, Vector - Data structure based on positional access
    ii) Map - HashMap, HashTable, LinkedHashMap, TreeMap - Data structures that map keys to values.
    iii) Set - HashSet, LinkedHashSet, TreeSet - Data structures based on element uniqueness.
    iv) Queue - PriorityQueue - Queues typically order element in first in first out(FIFO) manner.

For sorting Collection API has comparator interface.
2) Java Basic Input/Output API
3) Java Networking API
4) Java Abstract Windows Toolkit API
5) Java Swing API

Java Utility class
java.util
Date - represents an instance in Time
Calendar - provides conversion of time instance to calendar fields
TimeZone - represents a time zone and adjust for day light saving time
Locale - represents a geographical, political or cultural region
Currency - represents a currency ISO 4217
Random - provides a random number generator
StringTokenizer - provides a means to break a string into tokens.
Timer - provides a task scheduling facility.          


Java Basic Input output API
==============================
It is contained in a package java.io
It provides functionality for general system input and output in relationship to data streams, serialization and file system.
Data stream class include byte-stream subclass of the InputStream and OutputStream classes.
Data stream class also include character-stream subclasses of Reader and Writer classes.

Reader and Writer class Hierarchy

                        Reader
                          |
      |-------------------|---------------|------------------|                    
BufferedReader      PipedReader     InputStreamReader   FilterReader
                                        |
                                    FileReader

                                 
                        Writer
                            |
       |--------------------|--------------|----------------|----------------|                     
BufferedWriter      PipedWriter     OutputStreamWriter  PrintWriter     FilterWriter
                                            |
                                    FileWriter

Other import java.io classes and interface are File, FileDescriptor, FilenameFilter and RandomAccessFile.
File class provides a representation of file and directory pathname.
FileDescriptor provides a means to function as a handle for opening files and sockets.
FilenameFilter defines the functionality to filter filenames.
RandomAccessFile allows for reading and writing of files to specified locations.


Java Networking API
=======================
It is contained in the package java.net.
This API provides functionality of creating network applications.
Another improved performance New I/O API java.nio package, which provides for non blocking networking and the socket factory support package javax.net.

Classes of Networking API
java.net
Socket - provides for the implementation of client sockets
ServerSocket - provides for the implementation of server sockets
URL - represents a Uniform Resource Locator.
Inet4Address - represents an IP version 6  address
Inet6Address - represents an IPv6 address


Java Abstract Windows Toolkit API
=================================
This API provides functionality for creating heavyweeight components in regards to creating user interfaces and painting associated graphics and images.
java.awt
AWT Heavyweight Component API
AWT Focus Subsystem


Java Swing API
===============
This API provides functinality for creating lightweight containers and components.
It provides look-and-feel support, allowing for universal style changes.
Components like tooltips, accessibility functionality, event model, tables, tress, text components, sliders and progress bar.

javax.swing
JDialog
JFrame
JComponent -|--JTextComponent---JTextArea
            |---JPanel
            |---JToolTip
            |---JLabel
            |---JMenuBar
            |---JTabel
            |---AbstractButton---JButton

prefix java is commonly used for the core packages.
prefix javax is commonly used for packages in the AWT and Swing APIs:
java.awt, javax.swing.
Also JavaFX replaces swing as the GUI toolkit for java SE.


Java Utilities API
==================
In Java Se 6 and 7, 10 packages are in direct relation to java utilities API with package name java.util.
J2SE 5.0 has only nine package
J2SE 1.4 has only 6 packages

Following is the detail of the J2SE 1.4
